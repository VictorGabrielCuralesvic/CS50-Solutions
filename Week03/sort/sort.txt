sort1 uses: Bubble Sort

How do you know?: Taking into account that Bubble Sort has O(n^2) and that it is a more efficient organization algorithm for smaller files and sorted files, sort1 had poor performance on large reverse and random files, but was great on sorted files.

random5000 - 0,068 / 0,036 / 0,028
random10000 - 0,225 / 0,134 / 0,058
reversed5000 - 0,079 / 0,043 / 0,031
reversed10000 - 0,294 / 0,182 / 0,067
sorted5000 - 0,035 / 0,004 / 0,027
sorted10000 - 0,075 / 0,004 / 0,057

random50000 - 6,021 / 5,170 / 0,293
reversed50000 - 5,280 / 4,264 / 0,302
sorted50000 - 0,790 / 0,029 / 0,256

sort2 uses: Merge Sort

How do you know?: Merge Sort has O(n log N) which confirms that it is efficient on all files, both large and small, whether reversed or sorted or random.

random5000 - 0,058 / 0,000 / 0,035
random10000 - 0,067 / 0,000 / 0,57
reversed5000 - 0,033 / 0,000 / 0,032
reversed10000 - 0,074 / 0,000 / 0,61
sorted5000 - 0,040 / 0,004 / 0,027
sorted10000 - 0,123 / 0,006 / 0,059

random50000 - 0.905 / 0,029 / 0,268
reversed50000 - 0,875 / 0,017 / 0,278
sorted50000 - 0,688 / 0,026 / 0,264

sort3 uses: Selection Sort

How do you know?: Selection Sort has O(n^2) and it should behave poorly on all file types except the smallest files. That happens. sort3 works well for files (5000) but works poorly on larger files (10000) and (50000).

random5000 - 0,095 / 0,034 / 0,030
random10000 - 0,282/ 0,141 / 0,072
reversed5000 - 0,058 / 0,023 / 0,024
reversed10000 - 0,151 / 0,087 / 0,052
sorted5000 - 0,049 / 0,028 / 0,020
sorted10000 - 0,133 / 0,073 / 0,053

random50000 - 2,496 / 1,794 / 0,266
reversed50000 - 2,858 / 2,008 / 0,279
sorted50000 - 2,485 / 1,830 / 0,269
